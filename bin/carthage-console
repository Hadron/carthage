#!/usr/bin/python3

import asyncio, argparse, code, collections.abc, os.path, readline, rlcompleter, sys, traceback
import carthage, carthage.utils
from carthage import base_injector, AsyncInjector, ConfigLayout
import carthage.vmware.vm

history = {}
loop = asyncio.get_event_loop()
orig_displayhook = sys.displayhook

def noop():
    #dummy function used to start loop when called from another thread
    pass

class CarthageConsole(code.InteractiveConsole):

    def __init__(self, locals):
        super().__init__(locals = locals)
        self.completed_keys = []
        self.history_num = 0

    def raw_input(self, *args, **kwargs):
        for k in self.completed_keys:
            print(f'[{k}]: {history[k]}')
        self.completed_keys.clear()
        return super().raw_input(*args, **kwargs)
    
    def displayhook(self, obj):
        global history
        def future_callback(f):
            global history
            del history[num]
            try:
                history[num] = f.result()
                self.completed_keys.append(num)
            except Exception as e:
                print(f'[{num}]-> exception')
                traceback.print_exc()
                
                
        if isinstance(obj, collections.abc.Coroutine):
            self.history_num += 1
            num = self.history_num
            future = asyncio.ensure_future(obj, loop = loop)
            future.add_done_callback(future_callback)
            print(f'[{num}]: async {obj.__name__}')
            history[num] = future
            loop.call_soon_threadsafe(noop)
        else:
            orig_displayhook(obj)
            
            

carthage_locals = {
    'injector': base_injector,
    'ainjector': base_injector(AsyncInjector),
    'loop': loop,
    'h': history,
    'config': base_injector(ConfigLayout)
    
}

orig_display_hook = sys.displayhook

console = CarthageConsole(locals = carthage_locals)
parser = carthage.utils.carthage_main_argparser()

parser.add_argument('--rcfile',
                    metavar = "file",
                    default = "~/.carthagerc",
        help = "Python code to run in Carthage console")
args = carthage.utils.carthage_main_setup(parser)
if args.rcfile:
    try:
        with open(os.path.expanduser(args.rcfile), "rt") as f:
            exec(f.read(), carthage_locals)
    except FileNotFoundError: pass

    sys.displayhook = console.displayhook

async def run():
    completer = rlcompleter.Completer(carthage_locals)
    readline.set_completer(completer.complete)
    readline.parse_and_bind('tab: complete')
    await loop.run_in_executor(None, console.interact)
    
carthage.utils.carthage_main_run(run)
