#!/usr/bin/python3

import argparse
import pathlib
import mako.template
import os
import sh
from sh import git

templates = {
    "python/layout.py": """import carthage
from carthage import *
from carthage.ansible import *
from carthage.container import *
from carthage.debian import *
from carthage.dependency_injection import *
from carthage.image import *
from carthage.machine import *
from carthage.modeling import *
from carthage.network import V4Config, collect_vlans
from carthage.ssh import SshKey
from carthage.systemd import *
from carthage.vm import Vm, vm_image

class Layout(CarthageLayout, AnsibleModelMixin):

    layout_name = "${name}"

    add_provider(machine_implementation_key, dependency_quote(LocalMachine))
""",

"carthage_plugin.yml": """name: ${name}
""",

"config.yml": """config:
  layout_name: ${name}
  base_dir: ${base}/${name}
  checkout_dir: ${base}/${name}/checkout
""",

    "carthage_plugin.py": """from . import layout
from carthage import *

@inject(injector = Injector)
def carthage_plugin(injector):
    injector.add_provider(layout.Layout)
"""
}

def _new(args):
    if args.git:
        r = git("status", _ok_code=[0, 128])
        if r.exit_code == 0:
            raise FileExistsError("Refusing to create a new .git repository as a child of an existing repository")

    BASE_DIR = pathlib.PosixPath(os.environ["PWD"])
    LAYOUT_DIR = (BASE_DIR / args.name)
    if LAYOUT_DIR.is_dir():
        raise ValueError(f"A directory named {args.name} already exists")

    (LAYOUT_DIR / "python").mkdir(parents=True)
    for f, t in templates.items():
        with (LAYOUT_DIR / f).open("w") as fp:
            fp.write(
                mako.template.Template(t).render(base=str(BASE_DIR), name=args.name)
            )

    if args.git:
        git("-C", f"{str(LAYOUT_DIR)}", "init")
        git("-C", f"{str(LAYOUT_DIR)}", "add", "-A")
        git("-C", f"{str(LAYOUT_DIR)}", "commit", "-am", f"Init {args.name}")


def _plugin(args):
    print("This does nothing for now.")


def main():
    ap = argparse.ArgumentParser()
    sp = ap.add_subparsers(dest="cmd")

    new = sp.add_parser("new", help="Create a new layout")
    new.add_argument("name", help="The layout name")
    new.add_argument("--git", "-G", help="Setup git", action="store_true")

    plugin = sp.add_parser("plugin", help="Manage plugins")

    args = ap.parse_args()

    if args.cmd == "new":
        _new(args)
    if args.cmd == "plugin":
        _plugin(args)

    if args.cmd == None:
        ap.print_help()

main()
