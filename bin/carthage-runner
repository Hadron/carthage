#!/usr/bin/python3
# Copyright (C) 2018, 2019, 2020, 2021, Hadron Industries, Inc.
# Carthage is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License version 3
# as published by the Free Software Foundation. It is distributed
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the file
# LICENSE for details.

import argparse, os, sys, gc, traceback, yaml
import asyncio, logging
import  carthage.console
from carthage.dependency_injection import AsyncInjector, InjectionKey, shutdown_injector
from carthage import base_injector, sh, ssh
from carthage.network import Network, BridgeNetwork, external_network_key
from carthage.machine import Machine
import carthage.ssh
from carthage.modeling import CarthageLayout

logger = logging.getLogger('carthage')

machines = []
        
async def queue_worker():
    global machines
    while True:
        name, action = await machine_queue.get()
        try:
            m_new = await ainjector.get_instance_async(InjectionKey(Machine, host = name))
            if action == 'start':
                await m_new.start_machine()
                machines.append(m_new)
            elif action == 'stop':
                await m_new.stop_machine()
        except Exception:
            print('Error Creating {}'.format(name))
            traceback.print_exc()

async def queue_explicit(l, action):
    for m in l:
        machine_queue.put_nowait((m, action))

async def queue_all(action):
    for m in ainjector.filter(Machine, ['host'], stop_at = ainjector.injector):
        machine_queue.put_nowait((m.host, action))
        
async def run():
    global ainjector, layout
    layout = await ainjector.get_instance_async(CarthageLayout)
    ainjector = layout.ainjector
    if 'generate' in args.actions:
        await layout.generate()
    if 'start' in args.actions and args.start:
        await queue_explicit(args.start, 'start')
    elif 'start' in args.actions:
        await queue_all('start')
    if 'stop' in args.actions and args.stop:
        await queue_explicit(args.stop, 'stop')
    elif 'stop' in args.actions:
        await queue_all('stop')

    queue_workers.append(loop.create_task(queue_worker()))
    queue_workers.append(loop.create_task(queue_worker()))
    try:
        console.locals['ainjector'] = ainjector
        console.locals['layout'] = layout
        console.locals['in_tmux'] = 'TMUX' in os.environ
        console.exec_resource('carthage', 'resources/runner_console.py')
        if 'async_setup' in console.locals:
            await console.locals['async_setup']();
            del console.locals['async_setup']
        await loop.run_in_executor(None, console.interact)
    except Exception:
        logger.exception('console failed:')
    finally:
            
        global machines
        futures = []
        for m in machines:
            if m.running:
                futures.append(loop.create_task(m.stop_machine()))
                await asyncio.wait(futures, timeout = 10)
                for m in machines:
                    m.close()
                    del machines
            

    
ainjector = base_injector(AsyncInjector)

loop = asyncio.get_event_loop()
machine_queue = asyncio.Queue()

parser = carthage.utils.carthage_main_argparser()
parser.add_argument('--generate',
                    help = "Generate configuration for the layout",
                    dest = 'actions',
                    action = 'append_const',
                    const = 'generate',
                    default = [])
parser.add_argument("--start",
                    nargs = "*",
                    metavar = "machine",
                    help = "Start machines",
                    )
parser.add_argument(
    '--stop', nargs = '*',
    metavar = 'machines',
    help = "Stop already running machines",
)
parser.add_argument('--no-tmux', action = 'store_false',
                    dest = 'tmux', default = True,
                    help = "Do not start a tmux for the console")


console = carthage.console.CarthageConsole()
console.add_arguments(parser)

args = carthage.utils.carthage_main_setup(parser)


# First see if we need to rexec
if 'TMUX' not in os.environ and  args.tmux:
    os.execvp("tmux", ["tmux", "new-session", "-A", "-scarthage",
                       ]+sys.argv)

if args.start is not None:
    args.actions.append('start')
if args.stop is not None:
    args.actions.append('stop')
if not args.actions:
    args.actions = ['generate', 'start']
    

console.process_arguments(args)




try:
    queue_workers = []
    loop.run_until_complete(run())
    for q in queue_workers:
        q.cancel()
finally:
    loop.run_until_complete(shutdown_injector(base_injector))
    gc.collect()
