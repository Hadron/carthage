- hosts: vault.hadronindustries.com
  remote_user: root
  gather_facts: false
  tasks:
    - command: cat /token
      register: vault_token
    - name: Prepare vault unsealing
      copy: 
        dest: /root/unseal.sh
        owner: root
        mode: 0755
        content: |
          #!/bin/sh
          export VAULT_ADDR=http://127.0.0.1:8201/
          sleep 2 #I'm not sure vault has good systemd notification
          # Insecure for anything production because the unseal key is in the command line
          vault operator unseal `cat /key.0`
    - name: Populate systemd unit for unsealing
      copy:
        dest: /etc/systemd/system/unseal.service
        mode: 0644
        content: |
          [Unit]
          Description=Unseal Vault
          After=vault.service

          [Service]
          Type=oneshot
          ExecStart=/root/unseal.sh

          [Install]
          WantedBy=multiuser.target

    - name: Enable unseal service
      systemd: name=unseal.service enabled=yes
          
- hosts: database.hadronindustries.com
  remote_user: root
  gather_facts: false
  environment:
    VAULT_ADDR: https://vault.hadronindustries.com:8200/
    VAULT_TOKEN: '{{hostvars["vault.hadronindustries.com"].vault_token.stdout}}'
  tasks:
    - name: Enable root PKI
      command: carthage-vault-tool --ca /vault_bootstrap/ca.pem --vault-config /hadron-operations/ansible/resources/vault/hadron-root.yml

- hosts: localhost
  remote_user: root
  environment:
    VAULT_ADDR: 'https://{{hostvars["vault.hadronindustries.com"].ansible_host}}:8200/'
    VAULT_TOKEN: '{{hostvars["vault.hadronindustries.com"].vault_token.stdout}}'
    VAULT_SKIP_VERIFY: yes
  tasks:
    - file: path={{config.state_dir}}/pki mode=0700 state=directory
    - name: Construct PEM Bundle
      shell: cat {{config.state_dir}}/pki/ca.key {{config.state_dir}}/pki/ca.pem >{{config.state_dir}}/pki/root_credentials.pem
    - name: Install PEM bundle on Vault
      command: vault write root_pki/config/ca pem_bundle=@{{config.state_dir}}/pki/root_credentials.pem
    - name: Generate CSR for ACES Hosts
      command: vault write --field=csr aces_hosts_ca/intermediate/generate/internal common_name="ACES Hosts CA"
      register: aces_hosts_csr
    - name: Sign ACES Hosts CA
      command: vault write --field=certificate root_pki/root/sign-intermediate csr=-
      args:
        stdin: '{{aces_hosts_csr.stdout}}'
      register: aces_hosts_cert
    - name: Install ACES Hosts Cert
      command: vault write aces_hosts_ca/intermediate/set-signed certificate=-
      args:
        stdin: '{{aces_hosts_cert.stdout}}'
        
    
    - name: Generate CSR for Hadron Hosts
      command: vault write --field=csr hadron_hosts_ca/intermediate/generate/internal common_name="Hadron Hosts CA"
      register: hadron_hosts_csr
    - name: Sign ACES Hosts CA
      command: vault write --field=certificate root_pki/root/sign-intermediate csr=-
      args:
        stdin: '{{hadron_hosts_csr.stdout}}'
      register: hadron_hosts_cert
    - name: Install Hadron Hosts Cert
      command: vault write hadron_hosts_ca/intermediate/set-signed certificate=-
      args:
        stdin: '{{hadron_hosts_cert.stdout}}'

    - name: Generate host certs for vault
      command: vault write --field=certificate hadron_hosts_ca/issue/hadron common_name=vault.hadronindustries.com format=pem_bundle
      register: vault_pem_bundle
    - name: Install Vault Host Credentials
      delegate_to: vault.hadronindustries.com
      copy:
        dest: /etc/ssl/vault-credentials.pem
        mode: 0600
        content: '{{vault_pem_bundle.stdout}}'

    - name: reload vault to catch new creds
      systemd: name=vault state=reloaded
      delegate_to: vault.hadronindustries.com
      
   